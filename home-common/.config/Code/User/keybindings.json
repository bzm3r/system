// Place your key bindings in this file to override the defaults
[
    /**
    * Central
    **/
    {
        "key": "ctrl+space",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpen"
    },
    /**
    * Panel bindings (CTRL+K)
    **/
    {
        "key": "ctrl+k esc",
    },
    {
        "key": "ctrl+k e",
        "command": "workbench.view.explorer"
    },
    {
        "key": "alt+g g",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+k d",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+k x",
        "command": "workbench.view.extensions"
    },
    {
        "key": "ctrl+k b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "ctrl+alt+right",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorFocus && editorHasSelection"
    },
    /**
    * Editor navigation (CTRL+W)
    **/
    {
        "key": "ctrl+w rightArrow",
        "command": "workbench.action.splitEditorRight",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+w leftArrow",
        "command": "workbench.action.splitEditorLeft",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+w alt+w",
        "command": "workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+w shift+w",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+w shift+q",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+w k",
        "command": "workbench.action.openNextRecentlyUsedEditor"
    },
    {
        "key": "ctrl+w j",
        "command": "workbench.action.openPreviousRecentlyUsedEditor"
    },
    {
        "key": "ctrl+w space",
        "command": "workbench.action.showAllEditorsByMostRecentlyUsed"
    },
    /**
    * Navigation (CTRL+G)
    **/
    {
        "key": "ctrl+g s",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+g t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+g d",
        "command": "editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g upArrow",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+g l",
        "command": "workbench.action.gotoLine"
    },
    /**
    * Dev tools (CTRL+D)
    */
    {
        "key": "ctrl+d d",
        "command": "workbench.action.toggleDevTools"
    },
    /**
    * Find/Replace (CTRL+F), (CTRL+H)
    */
    {
        "key": "ctrl+f r",
        "command": "toggleFindRegex",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    {
        "key": "ctrl+f w",
        "command": "toggleFindWholeWord",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    {
        "key": "ctrl+f u",
        "command": "toggleFindCaseSensitive",
        "when": "findWidgetVisible && inputFocus && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible",
    },
    {
        "key": "ctrl+h s",
        "command": "runCommands",
        "args": {
            "commands": [
                "closeFindWidget",
                "editor.action.startFindReplaceAction",
                "toggleFindInSelection"
            ]
        },
        "when": "editorFocus && editorHasSelection && findWidgetVisible",
    },
    {
        "key": "ctrl+h s",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.startFindReplaceAction",
                "toggleFindInSelection"
            ]
        },
        "when": "editorIsOpen && editorHasSelection && !findWidgetVisible",
    },
    {
        "key": "ctrl+h h",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.startFindReplaceAction",
                "actions.findWithSelection"
            ]
        },
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "ctrl+h h",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.startFindReplaceAction",
            ]
        },
        "when": "editorFocus && !editorHasSelection"
    },
    {
        "key": "ctrl+f",
        "command": "actions.findWithSelection",
        "when": "editorFocus && editorHasSelection"
    },
    {
        "key": "ctrl+f",
        "command": "actions.find",
        "when": "editorFocus && !editorHasSelection"
    },
    /**
    * Hide Toaster Notifications
    **/
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "alt+a",
        "command": "workbench.action.toggleActivityBarVisibility"
    },
    /**
    * Git: save files and prepare commit
    */
    {
        "key": "alt+shift+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "saveAll",
                "git.stageAll",
                "git.commitAll",
            ]
        }
    },
    {
        "key": "alt+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.files.save",
                "git.stageChange",
                "git.commitStaged",
            ]
        }
    },
    /**
    * rust-analyzer related
    */
    {
        "key": "ctrl+s",
        "command": "runCommands",
        "args": {
            "commands": [
                "saveAll",
                "rust-analyzer.runFlycheck"
            ]
        },
        "when": "editorTextFocus && editorLangId == 'rust'",
    },
    {
        "key": "ctrl+.",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+.",
        "command": "editor.action.triggerSuggest"
    },
    {
        "key": "ctrl+shift+h",
        "command": "toggle",
        "args": {
            "id": "inlayHints",
            "value": [
                {
                    "editor.inlayHints.enabled": "on"
                },
                {
                    "editor.inlayHints.enabled": "off"
                }
            ]
        },
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+e e",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "tab",
        "command": "runCommands",
        "args": {
            "commands": [
                "acceptSelectedSuggestion",
            ]
        },
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    /**
    Disabled stuff
    **/
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+up",
        "command": "-scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+pageup",
        "command": "-scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "alt+up",
        "command": "-showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+p",
        "command": "-keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "alt+o",
        "command": "-C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+f9",
        "command": "-editor.action.nextCommentThreadAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.editor.previousChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f9",
        "command": "-editor.action.previousCommentThreadAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "alt+j alt+e",
        "command": "-language-julia.changeCurrentEnvironment",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+j alt+w",
        "command": "-REPLVariables.focus"
    },
    {
        "key": "alt+j alt+n",
        "command": "-language-julia.newJuliaFile"
    },
    {
        "key": "alt+j alt+r",
        "command": "-language-julia.restartREPL"
    },
    {
        "key": "alt+j alt+m",
        "command": "-language-julia.chooseModule",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+j alt+d",
        "command": "-language-julia.show-documentation",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+j alt+p",
        "command": "-language-julia.show-plotpane"
    },
    {
        "key": "alt+j alt+o",
        "command": "-language-julia.startREPL"
    },
    {
        "key": "alt+j alt+k",
        "command": "-language-julia.stopREPL"
    },
    {
        "key": "ctrl+l ctrl+j",
        "command": "latex-workshop.synctex",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !virtualWorkspace && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+l alt+j",
        "command": "-latex-workshop.synctex",
        "when": "config.latex-workshop.bind.altKeymap.enabled && editorTextFocus && !virtualWorkspace && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+g j",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+g k",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+e f",
        "command": "errorLens.searchForProblem"
    },
    {
        "key": "ctrl+/ w",
        "command": "rewrap.rewrapComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+q",
        "command": "-rewrap.rewrapComment",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+g right",
        "command": "workbench.action.navigateForwardInNavigationLocations"
    },
    {
        "key": "ctrl+g down",
        "command": "workbench.action.navigateForwardInEditLocations"
    },
    {
        "key": "ctrl+g up",
        "command": "workbench.action.navigateBackInEditLocations"
    },
    {
        "key": "ctrl+g left",
        "command": "workbench.action.navigateBackInNavigationLocations"
    },
    {
        "key": "ctrl+w ctrl+q",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+q e",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "ctrl+j m",
        "command": "rust-analyzer.expandMacro",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+j d",
        "command": "rust-analyzer.openDocs",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+j p",
        "command": "rust-analyzer.parentModule",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-rust-analyzer.parentModule",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+q a",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+q x",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+shift+q",
        "command": "-workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveAs",
        "when": "editorLangId != 'rust'"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+e a",
        "command": "errorLens.toggle"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "alt+m",
        "command": "-extension.minifyJSON"
    },
    {
        "key": "ctrl+alt+m",
        "command": "-extension.prettyJSON"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+right",
        "command": "cursorLineEnd",
        "when": "editorTextFocus && multiCursorModifier"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+right",
        "command": "cursorLineEndSelect",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+alt+o",
        "command": "-workbench.action.remote.showMenu"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.terminal.openDetectedLink",
        "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalFocus && terminalHasBeenCreated"
    },
    {
        "key": "ctrl+; ctrl+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+o right",
        "command": "workbench.action.compareEditor.openSide",
        "when": "inDiffEditor"
    },
    {
        "key": "ctrl+k shift+o",
        "command": "-workbench.action.compareEditor.openSide",
        "when": "inDiffEditor"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+f shift+f",
        "command": "workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+g j",
        "command": "editor.action.accessibleDiffViewer.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "f7",
        "command": "-editor.action.accessibleDiffViewer.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+g k",
        "command": "editor.action.accessibleDiffViewer.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.accessibleDiffViewer.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+g i",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+escape",
        "command": "-closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "ctrl+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "alt+k b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k left",
        "command": "-views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k left",
        "command": "workbench.action.movePanelToSecondarySideBar"
    },
    {
        "key": "alt+k right",
        "command": "workbench.action.moveSecondarySideBarToPanel"
    },
    {
        "key": "ctrl+k o",
        "command": "outline.toggleVisibility"
    },
    {
        "key": "ctrl+i",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+i",
        "command": "-focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+i",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k i",
        "command": "-inlineChat.start",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+d h",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+d d",
        "command": "workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+i",
        "command": "-inlineChat.start",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "down",
        "command": "-inlineChat.focus",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'"
    },
    {
        "key": "up",
        "command": "-inlineChat.focus",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'"
    },
    {
        "key": "enter",
        "command": "-inlineChat.accept",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatVisible && !inlineChatEmpty"
    },
    {
        "key": "down",
        "command": "-inlineChat.arrowOutDown",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
    },
    {
        "key": "up",
        "command": "-inlineChat.arrowOutUp",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
    },
    {
        "key": "escape",
        "command": "-inlineChat.cancel",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "escape",
        "command": "-inlineChat.discard",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit"
    },
    {
        "key": "ctrl+down",
        "command": "-inlineChat.nextFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd"
    },
    {
        "key": "ctrl+up",
        "command": "-inlineChat.previousFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorStart"
    },
    {
        "key": "escape",
        "command": "-inlineChat.stop",
        "when": "inlineChatHasActiveRequest && inlineChatHasProvider && inlineChatVisible && !inlineChatEmpty"
    },
    {
        "key": "ctrl+z",
        "command": "-inlineChat.unstash",
        "when": "inlineChatHasStashedSession && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "-chat.action.acceptInput",
        "when": "inChatInput && textInputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-workbench.action.chat.clear",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "f9",
        "command": "-workbench.action.chat.nextCodeBlock",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+f9",
        "command": "-workbench.action.chat.nextFileTree",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "shift+f9",
        "command": "-workbench.action.chat.previousCodeBlock",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+shift+f9",
        "command": "-workbench.action.chat.previousFileTree",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-workbench.action.chat.runInTerminal",
        "when": "hasChatProvider && inChat"
    },
    {
        "key": "ctrl+up",
        "command": "-chat.action.focus",
        "when": "inChatInput && textInputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.chat.focusInput",
        "when": "inChat && !editorFocus"
    },
    {
        "key": "delete",
        "command": "-workbench.action.chat.remove",
        "when": "inChat && !inChatInput"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.quickchat.toggle",
        "when": "hasChatProvider"
    },
    {
        "key": "ctrl+,",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g i",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+g u",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+g u",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+; ctrl+i",
        "command": "-testing.toggleInlineTestOutput"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+.",
        "command": "-acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "shift+escape",
        "command": "-hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+up",
        "command": "-selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "right",
        "command": "previewSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-previewSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "shift+escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+.",
        "command": "editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\\\\\\\s|^)quickfix\\\\\\\\b/"
    },
    {
        "key": "shift+alt+.",
        "command": "-editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\\\\\\\s|^)quickfix\\\\\\\\b/"
    },
    {
        "key": "ctrl+shift+;",
        "command": "-breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+b",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+b",
        "command": "breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordLeft",
        "when": "!(breadcrumbsActive && breadcrumbsVisible) && textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+left",
        "command": "-cursorWordLeft",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+right",
        "command": "cursorWordEndRight",
        "when": "!(breadcrumbsActive && breadcrumbsVisible) && textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+g [",
        "command": "rust-analyzer.matchingBrace"
    },
    {
        "key": "ctrl+enter",
        "command": "-interactive.acceptChanges",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.editMode != 'preview'"
    },
    {
        "key": "ctrl+alt+j",
        "command": "rust-analyzer.joinLines",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-rust-analyzer.joinLines",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+f h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+f f",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "ctrl+u u",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.accessibleBufferGoToPreviousCommand",
        "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalAccessibleBufferFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && !terminalAccessibleBufferFocus || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && !terminalAccessibleBufferFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-workbench.action.terminal.selectToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u a",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u s",
        "command": "editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+-",
        "command": "-editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u ctrl+f",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u ctrl+a",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+=",
        "command": "-editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+u r",
        "command": "editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled && editorHasSelection"
    },
    {
        "key": "ctrl+k ctrl+,",
        "command": "-editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u space",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+[",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+u ctrl+z",
        "command": "editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+.",
        "command": "-editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k f",
        "command": "-workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "ctrl+j r",
        "command": "rust-analyzer.ssr"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+l ctrl+u",
        "command": "-latex-workshop.shortcut.underline",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/"
    },
    {
        "key": "ctrl+u f",
        "command": "editor.fold"
    },
    {
        "key": "ctrl+u ctrl+s",
        "command": "editor.unfoldAllExcept"
    },
    {
        "key": "ctrl+u ctrl+space",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+]",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+e a",
        "command": "workbench.actions.view.toggleProblems"
    },
    {
        "key": "ctrl+e v",
        "command": "workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+; ctrl+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "ctrl+; e",
        "command": "-testing.reRunFailTests"
    },
    {
        "key": "ctrl+e",
        "command": "-editor.action.toggleScreenReaderAccessibilityMode",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+e",
        "command": "keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+e i",
        "command": "editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+down",
        "command": "-editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "end",
        "command": "-editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e u",
        "command": "editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "home",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e j",
        "command": "editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pagedown",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e k",
        "command": "editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pageup",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+down",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "down",
        "command": "-editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+left",
        "command": "editor.action.scrollLeftHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "left",
        "command": "-editor.action.scrollLeftHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+right",
        "command": "editor.action.scrollRightHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "right",
        "command": "-editor.action.scrollRightHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+e ctrl+up",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused"    },
    {
        "key": "up",
        "command": "-editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+j t",
        "command": "editor.action.peekTypeDefinition"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/ /",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/ b",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+space",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+k ctrl+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "alt+g i",
        "command": "git.ignore"
    },
    {
        "key": "alt+g c",
        "command": "git.commit"
    },
    {
        "key": "alt+g shift+c",
        "command": "git.commitAll"
    },
    {
        "key": "alt+g z",
        "command": "git.undoCommit"
    },
    {
        "key": "alt+g b",
        "command": "git.branch"
    },
    {
        "key": "alt+g space",
        "command": "git.checkout"
    },
    {
        "key": "alt+g o",
        "command": "git.stashPop"
    },
    {
        "key": "alt+g u",
        "command": "git.stash"
    },
    {
        "key": "ctrl+enter",
        "command": "git.commitMessageAccept",
        "when": "editorLangId == 'git-commit'"
    },
    {
        "key": "alt+g shift+s",
        "command": "git.stage"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "alt+g s",
        "command": "git.stageChange"
    },
    {
        "key": "alt+g shift+q",
        "command": "git.unstageAll"
    },
    {
        "key": "alt+g q",
        "command": "git.unstage"
    },
    {
        "key": "ctrl+.",
        "command": "-problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-workbench.action.terminal.showQuickFixes",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+u a",
        "command": "diffEditor.collapseAllUnchangedRegions",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+u z",
        "command": "diffEditor.showAllUnchangedRegions",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+shift+i",
        "command": "merge-conflict.accept.all-incoming",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+c",
        "command": "merge-conflict.accept.current",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+shift+c",
        "command": "merge-conflict.accept.all-current",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+i",
        "command": "merge-conflict.accept.incoming",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g j",
        "command": "merge-conflict.next",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g k",
        "command": "merge-conflict.previous",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g u",
        "command": "merge.goToNextUnhandledConflict",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+g i",
        "command": "merge.goToPreviousUnhandledConflict",
        "when": "isMergeEditor"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+; a",
        "command": "-testing.runAll"
    },
    {
        "key": "ctrl+t j",
        "command": "testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "alt+f8",
        "command": "-testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "ctrl+t k",
        "command": "testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+alt+f8",
        "command": "-testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "ctrl+; f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+t p",
        "command": "rust-analyzer.peekTests"
    },
    {
        "key": "ctrl+t t",
        "command": "rust-analyzer.runSingle"
    },
    {
        "key": "ctrl+k /",
        "command": "editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+/",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+/",
        "command": "-liveshare.followToTheSide",
        "when": "liveshare:hasCollaborators"
    },
    {
        "key": "ctrl+/",
        "command": "-toggleExplainMode",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+/",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+g r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "alt+p s",
        "command": "workbench.action.openGlobalSettings"
    },
    {
        "key": "alt+p k",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+d b",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "ctrl+g m",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+k t",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+o d",
        "command": "workbench.action.files.openFolderInNewWindow"
    },
    {
        "key": "ctrl+q w",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "alt+f4",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+o a",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+o w",
        "command": "workbench.action.openWorkspaceInNewWindow"
    },
    {
        "key": "ctrl+t c",
        "command": "workbench.action.terminal.clear",
        "when": "terminalFocus"
    },
    {
        "key": "alt+g d",
        "command": "toggle.diff.renderSideBySide"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.save",
        "when": "editorLangId != 'rust'",
    },
]