{ pkgs, lib, config, ... }: {
  imports = [ ./host.nix ] ++ [
    ./aliases.nix
    ./audio.nix
    ./basics.nix
    ./default-dirs.nix
    ./dev.nix
    ./git.nix
    ./lua.nix
    ./nix.nix
    ./productivity.nix
    ./security.nix
    ./vm.nix
    ./zip.nix
    ./zsh.nix
  ] ++ [ ./gui ./starship ];

  options = {
    singleUser = lib.options.mkOption {
      type = lib.types.str;
      example = "alice";
      description =
        lib.mdDoc "Username of the primary user for this machine, as a string.";
    };
    homeBase = lib.options.mkOption {
      type = lib.types.str;
      example = "/home";
      default = "/home";
      description = lib.mdDoc "Base directory where home values are placed.";
    };
    sources = lib.options.mkOption {
      type = lib.types.attrsOf lib.types.anything;
      example = "{ nixpkgs = { ... }; rust-shell = { ... }; }";
      description = lib.mdDoc "Derivation of a rust-shell package";
    };
    machineVariants = lib.options.mkOption {
      type = lib.types.listOf lib.types.str;
      example = ''[ "d" "l" ]'';
      default = [ "d" "l" ];
      description = lib.mdDoc
        "The machines for which system configurations can be generated by this configuration.";
    };
  };

  config = let
    userName = config.singleUser;
    userHome = config.homeBase + "/" + userName;
  in {
    nix.settings = {
      # Deduplicate and optimize nix store
      auto-optimise-store = true;
      # enable some of the experimental commands for now
      experimental-features = [ "nix-command" ];

    };

    hardware.opengl.enable = true;
    i18n.defaultLocale = "en_US.UTF-8";

    # a bigger, default tty font
    console = with pkgs; {
      earlySetup = true;
      font = "${terminus_font}/share/consolefonts/ter-122n.psf.gz";
      packages = [ terminus_font ];
      keyMap = "us";
    };

    security = {
      sudo.extraConfig = "Defaults lecture = never ";
      polkit.enable = true;
    };

    services = {
      # hardware scanner + firmware recommender
      fwupd.enable = true;
      udisks2.enable = true;
    };

    # should set up one-time auto-detect (perhaps on startup/login)
    time.timeZone = "America/Vancouver";

    system.stateVersion =
      "24.05"; # TODO: properly understand why this should not be changed in general.

    users = {
      defaultUserShell = "${pkgs.zsh}/bin/zsh";
      users."${userName}" = {
        isNormalUser = true;
        home = userHome;
        extraGroups =
          [ "wheel" "networkmanager" "video" "rcontent_block" "libvirtd" ];
        useDefaultShell = true;
      };
    };

    # dev.cargoHomeBase = userHome;
  };
}
